# What is this?

Object oriented programming is a fundamentally different programming ideology compared to the methods you have likely used so far in your programming career. At a high level, it is based around the idea that the program is essentially a bunch of objects that talk to eachother to complete whatever task the program was designed to do. This is way different compared to the programs you have made before, which is essentially going to be a main function that calls some other functions to do some tasks. Assignment 1 was exactly that. We wanted to find the number of even numbers in some array, so we had a main that made our array and then called a function to complete the task. You will quickly find that functions are boring, or that the amount of detail (in the form of variables and states) you can modify with just functions is lacking. That is where an object comes in.

## What are Objects and Classes?

Lets discuss what an object is by taking a trip to Objectville. Objects live in Objectville. They are instantiated versions of a class. This might sound confusing, but you already lived in a similar town, called Variableberg, where variables live, which are instantiated versions of a “primitive” type. For example, lets say we have `int x = 0`, we recognize here that `x` is a variable of type `int`. Objects follow a similar style. Our Java code for making an arbitrary object would look something like `MyObject x = new MyObject()`. Just like our previous example, x is an Object we have declared in our code, of class MyObject.

Your next immediate question might be “wait, if objects and variables are so similar, why the heck do we have objects at all?” Well, the first hint to that is what object oriented programmers call the classic variables, such as `int`, `double`, `float`, `char`, `byte`, `bool`, etc. They call them primitives (which we will now use to refer to the old types you know and love). This hints that classes and objects can be much more sophisticated.

The primitive types basically only do one thing: they store data. An integer will store a 32-bit integer, and byte will store 8 bits, etc. An object is almost like a mini program. It can store data in the form of “instance variables”, functions (though they will typically be referred to as “methods” by object oriented programmers), and even other objects (which for all intents and purposes is a fancy instance variable)!
Why do People Use Object Oriented Programming, and Why Java?

Object oriented programming became quite popular back in the 90s, and became especially popular when Java was released to the public, as Java emphasized object oriented programming. Frankly, it was a bit of a buzz word, but object oriented does have real benefits. The primary ideas are that object oriented programming should allow you to rewrite as little code as possible, as it is very modular. You can write a small amount of code that uses objects/classes created by others, which can let you complete your task quickly. Additionally, because of its modular nature, it lets people collaborate easily. Multiple programmers can work on the same code base, but on different objects/classes. This can boost productivity, which looks great to the higher ups that forced this language on a bunch of poor 90s programmers.
Today, many popular languages support object oriented programming. C++ does, for example. Funnily, C++’s original name was “C with Classes,” so its hallmark feature was the addition of object oriented programming. Python also supports object oriented programming. We use Java in this course as it is an ok language and used heavily in CPEN 221.
